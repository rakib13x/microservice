name: Build & Deploy

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  # Build and push all Docker images
  build-and-push-images:
    runs-on: ubuntu-latest
    
    steps:
      - name: Free up disk space
        run: |
          echo "Initial disk usage:"
          df -h
          
          # Remove unnecessary tools and files
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android
          sudo apt-get clean
          
          echo "Disk usage after cleanup:"
          df -h
    
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.10.2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Create .npmrc for hoisting
        run: |
          echo "auto-install-peers=true" > .npmrc
          echo "shamefully-hoist=true" >> .npmrc

      - name: Install all dependencies
        run: |
          # Install all dependencies with hoisting
          pnpm install
          
          # Generate Prisma Client
          npx prisma generate
          
          # Verify critical dependencies
          echo "=== Verifying dependencies ==="
          test -d "node_modules/ioredis" && echo "‚úì ioredis found" || echo "‚úó ioredis missing"
          test -d "node_modules/kafkajs" && echo "‚úì kafkajs found" || echo "‚úó kafkajs missing"
          test -d "node_modules/imagekit" && echo "‚úì imagekit found" || echo "‚úó imagekit missing"

      - name: Build all services
        run: |
          # Build all services at once (like local-ci.sh does)
          pnpm run build
          
          # Clean up build cache after building
          rm -rf .nx/cache
          
          echo "Disk usage after build:"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push backend Docker images
        run: |
          # Clean node_modules before Docker builds to save space
          echo "Cleaning up node_modules to save space..."
          rm -rf node_modules
          rm -rf apps/*/node_modules
          rm -rf packages/*/node_modules
          
          # Create a universal Dockerfile for all services that doesn't use lockfile
          cat > Dockerfile.universal << 'EOF'
          FROM node:20-alpine AS builder
          
          ARG SERVICE_NAME
          WORKDIR /app
          
          # Copy all necessary files
          COPY package.json pnpm-workspace.yaml ./
          COPY packages ./packages
          COPY prisma ./prisma
          COPY apps/${SERVICE_NAME}/package.json ./apps/${SERVICE_NAME}/
          COPY apps/${SERVICE_NAME}/dist ./apps/${SERVICE_NAME}/dist
          
          # Enable pnpm and create .npmrc for hoisting
          RUN corepack enable && corepack prepare pnpm@8.10.2 --activate
          RUN echo "auto-install-peers=true" > .npmrc && echo "shamefully-hoist=true" >> .npmrc
          
          # Install without lockfile (since we already built and tested)
          RUN pnpm install --prod --no-frozen-lockfile
          
          # Generate Prisma client
          RUN npx prisma generate
          
          # Production stage
          FROM node:20-alpine
          
          ARG SERVICE_NAME
          ARG SERVICE_PORT
          
          WORKDIR /app
          
          RUN apk add --no-cache openssl dumb-init
          RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001
          
          # Copy everything from builder
          COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
          COPY --from=builder --chown=nodejs:nodejs /app/apps/${SERVICE_NAME}/dist ./dist
          COPY --from=builder --chown=nodejs:nodejs /app/prisma ./prisma
          COPY --from=builder --chown=nodejs:nodejs /app/packages ./packages
          
          USER nodejs
          EXPOSE ${SERVICE_PORT}
          
          ENTRYPOINT ["dumb-init", "--"]
          CMD ["node", "dist/main.js"]
          EOF
          
          # Build and push each backend service
          declare -A SERVICE_PORTS=(
            ["auth-service"]="6001"
            ["product-service"]="6002"
            ["order-service"]="6003"
            ["seller-service"]="6004"
            ["admin-service"]="6005"
            ["chatting-service"]="6006"
            ["kafka-service"]="6007"
            ["logger-service"]="6008"
            ["recommendation-service"]="6009"
            ["api-gateway"]="8080"
          )
          
          BACKEND_SERVICES=(
            "auth-service"
            "product-service"
            "order-service"
            "seller-service"
            "admin-service"
            "chatting-service"
            "kafka-service"
            "logger-service"
            "recommendation-service"
          )
          
          for service in "${BACKEND_SERVICES[@]}"; do
            echo "Building $service..."
            
            docker build \
              --build-arg SERVICE_NAME=$service \
              --build-arg SERVICE_PORT=${SERVICE_PORTS[$service]} \
              -t ${{ env.DOCKER_USERNAME }}/$service:latest \
              -f Dockerfile.universal .
            
            docker push ${{ env.DOCKER_USERNAME }}/$service:latest
            echo "‚úÖ $service built and pushed successfully"
            
            # Clean up Docker build cache after each build
            docker system prune -f
            echo "Cleaned up Docker cache. Current disk usage:"
            df -h
          done
          
          # Build API Gateway last
          echo "Building api-gateway..."
          docker build \
            --build-arg SERVICE_NAME=api-gateway \
            --build-arg SERVICE_PORT=8080 \
            -t ${{ env.DOCKER_USERNAME }}/api-gateway:latest \
            -f Dockerfile.universal .
            
          docker push ${{ env.DOCKER_USERNAME }}/api-gateway:latest
          echo "‚úÖ api-gateway built and pushed successfully"
          
          # Final cleanup
          docker system prune -af
          rm Dockerfile.universal
          
          echo "Final disk usage:"
          df -h

      - name: Build and push frontend Docker images
        run: |
          # Build and push each frontend service
          FRONTEND_SERVICES=(
            "user-ui"
            "seller-ui"
            "admin-ui"
          )
          
          for service in "${FRONTEND_SERVICES[@]}"; do
            echo "Building $service..."
            docker build -t ${{ env.DOCKER_USERNAME }}/$service:latest -f apps/$service/Dockerfile .
            docker push ${{ env.DOCKER_USERNAME }}/$service:latest
            echo "‚úÖ $service built and pushed successfully"
          done

  # Deploy to EC2
  deploy-to-ec2:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to app directory
            cd /home/ec2-user/eshop
            
            # Pull latest code
            git pull origin master
            
            # Set environment variables for deployment script
            export DOCKER_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            export CHANGED_BACKEND='["auth-service","product-service","order-service","seller-service","admin-service","chatting-service","kafka-service","logger-service","recommendation-service","api-gateway"]'
            export CHANGED_FRONTEND='["user-ui","seller-ui","admin-ui"]'
            
            # Make script executable and run deployment
            chmod +x scripts/deploy-production.sh
            ./scripts/deploy-production.sh

  # Optional: Deploy notification
  notify-completion:
    needs: [build-and-push-images, deploy-to-ec2]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build & Deploy Summary
        run: |
          echo "üéâ Build and deployment completed!"
          echo "Build status: ${{ needs.build-and-push-images.result }}"
          echo "Deployment status: ${{ needs.deploy-to-ec2.result }}"
          
          if [ "${{ needs.build-and-push-images.result }}" = "success" ] && [ "${{ needs.deploy-to-ec2.result }}" = "success" ]; then
            echo "‚úÖ All services successfully built and deployed!"
          else
            echo "‚ùå Some issues occurred during the process"
          fi