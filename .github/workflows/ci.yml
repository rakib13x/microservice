name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

permissions:
    contents: read
    actions: read

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{ secrets.DOCKERHUB_USERNAME }}/eshop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run tests
        run: npx nx affected -t lint test build --base=origin/master --skip-nx-cache
        env:
          NX_CLOUD_DISTRIBUTED_EXECUTION: false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    strategy:
      matrix:
        include:
          # Backend services
          - service: api-gateway
            dockerfile: docker/backend-service.template
            port: 8080
          - service: auth-service
            dockerfile: docker/backend-service.template
            port: 6001
          - service: product-service
            dockerfile: docker/backend-service.template
            port: 6002
          - service: order-service
            dockerfile: docker/backend-service.template
            port: 6003
          - service: seller-service
            dockerfile: docker/backend-service.template
            port: 6004
          - service: admin-service
            dockerfile: docker/backend-service.template
            port: 6005
          - service: chatting-service
            dockerfile: docker/backend-service.template
            port: 6006
          - service: kafka-service
            dockerfile: docker/backend-service.template
            port: 6007
          - service: logger-service
            dockerfile: docker/backend-service.template
            port: 6008
          - service: recommendation-service
            dockerfile: docker/backend-service.template
            port: 6009
          # UI services
          - service: user-ui
            dockerfile: docker/ui-service.template
            port: 3000
          - service: seller-ui
            dockerfile: docker/ui-service.template
            port: 3001
          - service: admin-ui
            dockerfile: docker/ui-service.template
            port: 3002
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            PORT=${{ matrix.port }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

  docker-compose-test:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cp .env.example .env
          echo "NODE_ENV=test" >> .env
          echo 'NEXT_PUBLIC_STRIPE_PUBLIC_KEY="pk_test_example"' >> .env

      - name: Test Docker Compose build
        run: |
          docker compose config
          docker compose build --parallel

      - name: Test production Docker Compose
        run: |
          docker compose -f docker-compose.prod.yml config
